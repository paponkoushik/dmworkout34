{% extends 'partials/variables.html.twig' %}

{% set module = page.header.text_right %}
{% set image = page.media[page.header.text_right.image] %}



{% block render_block %}
{# {{dd(page.parent().slug)}} #}
    <div class="paragraph text-right text-right-animation {{ module.classes }}">
        <div class="container text-right-container">
        {% if page.parent().slug == 'about-us'%}
            <div class="paragraph-image">
                <img class="" src="{{ image.url }}" alt="icon"/>
            </div>
        {% else %}
        <div class="video-container">
                {# <img class="" src="{{ image.url }}" alt="icon"/> #}
                <video id="myVideo" muted playsinline loop class="lazy-video" width="100%" preload="none" poster="{{ url('theme://images/video-poster.webp') }}" data-src="{{ url('theme://images/video.mp4') }}"></video>
            </div>
        {% endif %}
        
            
            <div class="text-right-text">
                {% if module.subtitle is not empty %}
                    <div class="sub-title">
                        <h4>{{ module.subtitle.translatable|striptags('<span>')|raw }}</h4>
                    </div>
                {% endif %}
                <div class="block-title">
                    <h3>{{ module.title.translatable|striptags('<span>')|raw }}</h3>
                </div>
                {{ page.content|raw }}

                {% for button in module.buttons  %}
                    <a class="button" href="{{ url(grav.language.getActive ~ '/about-us') }}">
                        {{ button.text.translatable }}
                    </a>
                {% endfor %}
            </div>
        </div>
    </div>

    <script>
document.addEventListener('DOMContentLoaded', function() {
    const video = document.getElementById('myVideo');
    
    // Essential settings for autoplay
    video.muted = true; // Required for autoplay
    video.playsInline = true; // For iOS
    video.loop = true;
    video.preload = 'metadata'; // Optimized lazy loading

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                // Lazy load if needed
                if (!video.src && video.dataset.src) {
                    video.src = video.dataset.src;
                    video.load();
                }
                
                // Attempt to play (no fallback button)
                video.play().catch(error => {
                    console.log('Autoplay blocked (normal on mobile):', error);
                });
            } else {
                video.pause();
            }
        });
    }, { 
        threshold: 0.7,
        rootMargin: '0px 0px -50px 0px' // Triggers slightly early
    });

    observer.observe(video);

    // Optional: Click to play/pause (remove if unwanted)
    video.addEventListener('click', () => {
        if (video.paused) video.play();
        else video.pause();
    });
});
</script>
{% endblock %}
